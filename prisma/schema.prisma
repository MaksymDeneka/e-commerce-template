// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole {
  USER
  ADMIN
}

enum AccountType {
  EMAIL
  GOOGLE
}

// model Users {
//   id                    String     @id @default(cuid())
//   email                 String     @unique
//   hash                  String?
// 	salt                  String?
// 	accountType           AccountType @default(EMAIL)
//   role                  UserRole   @default(USER)
//   // firstName             String?
//   // lastName              String?
//   // emailVerified         DateTime?  // For email verification
//   // lastLogin             DateTime?  // Track login activity
//   // failedLoginAttempts   Int        @default(0)
//   // lastFailedLoginAt     DateTime?
//   createdAt             DateTime   @default(now())
//   // updatedAt             DateTime   @updatedAt

//   sessions              Session[]
// }

// // Optional: Add session management
// model Session {
//   id        String   @unique
//   userId    String
//   user      Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   expiresAt DateTime
//   createdAt DateTime @default(now())

//   @@index([userId])
// }

model Users {
  id            String     @id @default(cuid())
  email         String    @unique
  role          UserRole  @default(USER)
  accounts      Accounts[]
  sessions      Sessions[]
}

model Accounts {
  id          String     @id @default(cuid())
  userId      String
  user        Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountType AccountType
  githubId    String?     @unique
  googleId    String?     @unique
  password    String?
  salt        String?

  @@index([userId, accountType])
}

model Sessions {
  id        String   @id
  userId    String
  user      Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime

  @@index([userId])
}